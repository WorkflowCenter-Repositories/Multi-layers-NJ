#eSc workflow of 11 tasks deployed on 11 containers

tosca_definitions_version: cloudify_dsl_1_0

imports:
  - http://www.getcloudify.org/spec/cloudify/3.1/types.yaml
  - https://github.com/WorkflowCenter-Repositories/Node-Relationship-Types/raw/master/esc_nodetypes.yaml

inputs:

  input-dir:
      description: >
        The dir path of the input files  
      default: 'Input-sample'

  input-file1:
      description: >
        input file for importFile1
      default: file1.txt

  docker-image: 
      description: > 
        Docker image to be used for container building
      default: 'ubuntu:14.04'

  create_image:
      description: > 
        an option to create Docker images
      default: 'True'

  local-caching:
      description: > 
        an option to locally cache Docker images
      default: 'False'

  public-cache:
      description: > 
        an option to publically cache Docker images
      default: 'False'

node_types:

  docker_container:
    derived_from: cloudify.nodes.Root
    properties:
      image_name:
        type: string
        default: { get_input: docker-image } 
      container_ID:
        type: string
        default: container-1

node_templates:

  host:
    type: cloudify.nodes.Compute
    properties:
      ip: localhost
      install_agent: false

  starterBlock:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/start-inhost.sh
          inputs:
            process:
              args: [WF-1]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host

  container-1:
    type: docker_container
    properties:
      #image_name: dtdwd/importfile1
      container_ID: container-1
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/container-WF.sh
          inputs:
            process:
              args: [WF-1, java8, clustalw2, wine, megacc]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: starterBlock

  Java:
    type: spec_library
    properties:
      lib_name: default-jdk
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/java-install2.sh
          inputs:
            process:
              args: [container-1, WF-1, '8']
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1

  importFile1:
    type: importfile
    properties:
      block_description: import file
      block_name: importfile1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ImportFile-Task/raw/v1.0/importfile1.jar'
      Source: file1.txt
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [importFile1, block_Url]]
        configure:
          implementation: scripts/get-input.sh
          inputs:
            process:
             args: [WF-1, container-1, { get_input: input-dir }, { get_input: input-file1 }]
        start: 
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
             args: [WF-1, container-1, { get_input: input-file1 }]
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: cloudify.relationships.depends_on
        target: Mega-CC

  FilterDupl:
    type: filterDupl
    properties:
      block_description: I don't know
      block_name: filterduplicates1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/Filter-Duplicate-Task/raw/v1.0/filterduplicates1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: block_link
        target: importFile1
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [importFile1/output-1, FilterDupl/fasta-files, WF-1, container-1]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [FilterDupl, block_Url]]
        start:
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
              args: [WF-1, container-1]

  ClustalW_Lib:
    type: clustalw_lib
    properties:
      lib_name: clustalw2
      lib_URL: http://www.clustal.org/download/current/clustalw-2.1-linux-x86_64-libcppstatic.tar.gz
      lib_path: clustalw-2.1-linux-x86_64-libcppstatic
      version: 2.1
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/Lib-install.sh
          inputs:
            process:
              args: [container-1, get_property: [ClustalW_Lib, lib_URL]]
    relationships:
      - type: cloudify.relationships.depends_on
        target: Java
      - type: cloudify.relationships.contained_in
        target: container-1

  ClustalW:
    type: clustalW
    properties:
      block_description: I don't know
      block_name: clustalw1.jar
      block_category: File Management
      service_type: block
      Align: true
      Output-Type: CLUSTAL
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ClustalW-Task/raw/v1.0/clustalw1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: cloudify.relationships.depends_on
        target: ClustalW_Lib
      - type: block_link
        target: FilterDupl
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [FilterDupl/filtered-fasta-files, ClustalW/input-sequences, WF-1, container-1]        
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [ClustalW, block_Url]]
        start:
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
              args: [WF-1, container-1,  get_property: [ClustalW_Lib, lib_path]]

  Wine:
    type: spec_library
    properties:
      lib_name: wine
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: scripts/wine-install.sh
          inputs:
            process:
              args: [container-1]
    relationships:
      - type: cloudify.relationships.depends_on
        target: ClustalW_Lib
      - type: cloudify.relationships.contained_in
        target: container-1

  Mega-CC:
    type: MegaCC
    properties:
      lib_name: megacc.exe
      lib_URL: http://www.megasoftware.net/
      lib_path: Mega-CC
      version: 6.0
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/Lib-install.sh
          inputs:
            process:
              args: [container-1, 'https://github.com/rawaqasha/Libs/raw/master/Mega-CC.tar.gz']
    relationships:
      - type: cloudify.relationships.depends_on
        target: Wine
      - type: cloudify.relationships.contained_in
        target: container-1

  Mega-NJ:
    type: mega-nj
    properties:
      block_description: I don't know
      block_name: mega-NJ1.jar
      block_category: File Management
      service_type: block 
      test_of_phylogeny: Bootstrap method
      no-ofbootstrapreplications: 1000
      model/method: Kimura 2-parameter model
      substitutions_to_include: 'd: Transitions + Transversions'
      rates_among_sites: Uniform rates        
      gamma_parameter: 1
      gaps/missing_data_treatment: 'Complete deletion'       
      site_coverage_cutoff(%): 95
      block_Url: https://github.com/WorkflowCenter-Repositories/Mega-NJ-Task/raw/v1.0/mega-nj1.jar
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: cloudify.relationships.depends_on
        target: Mega-CC
      - type: block_link
        target: ClustalW
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [ClustalW/aligned-sequences, Mega-NJ/input-data, WF-1, container-1]        
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [Mega-NJ, block_Url]]
        start:
          implementation: scripts/special-deploy.sh
          inputs:
            process:
              args: [WF-1, container-1, 'Mega-CC']

  ExportFiles1:
    type: exportfiles
    properties:
      block_description: export files
      block_name: exportfiles1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ExportFiles-Task/raw/v1.0/exportfiles1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: block_link
        target: Mega-NJ
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [Mega-NJ/analysis-output, ExportFiles1/file-list, WF-1, container-1]
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [ExportFiles1, block_Url]]
        start: 
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
             args: [WF-1, container-1]

  ZipFile:
    type: zipFile
    properties:
      block_description: invert the column of csv file
      block_name: filezip1.jar
      block_category: File Management
      service_type: block
      block_Url: https://github.com/WorkflowCenter-Repositories/ZipFile-Task/raw/v2/filezip1.jar
    interfaces:
      cloudify.interfaces.lifecycle:
        create: 
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [ZipFile, block_Url]]
        start: 
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
             args: [WF-1, container-1, "rawa"]
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: cloudify.relationships.depends_on
        target: Java
      - type: block_link
        target: Mega-NJ
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [Mega-NJ/consensus-output, ZipFile/input-1, WF-1, container-1]

  ExportFiles2:
    type: exportfiles
    properties:
      block_description: export files
      block_name: exportfiles1.jar
      block_category: File Management
      service_type: block
      block_Url: 'https://github.com/WorkflowCenter-Repositories/ExportFiles-Task/raw/v1.0/exportfiles1.jar'
    relationships:
      - type: cloudify.relationships.contained_in
        target: container-1
      - type: block_link
        target: ZipFile
        source_interfaces:
          cloudify.interfaces.relationship_lifecycle:
            preconfigure:
              implementation: LifeCycleScripts/datacopy.sh
              inputs:
                process:
                  args: [ZipFile/output-1, ExportFiles2/file-list, WF-1, container-1]
      - type: cloudify.relationships.depends_on
        target: Java
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: LifeCycleScripts/task-download-single.sh
          inputs:
            process:
             args: [{ get_input: create_image }, container-1, get_property: [ExportFiles2, block_Url]]
        start: 
          implementation: LifeCycleScripts/task-deploy.sh
          inputs:
            process:
             args: [WF-1, container-1]

  finalBlock:
    type: cloudify.nodes.ApplicationModule
    interfaces:
      cloudify.interfaces.lifecycle:
        configure:
          implementation: LifeCycleScripts/containers-clean.sh
          inputs:
            process:
              args: [container-1]
        start:
          implementation: LifeCycleScripts/final-inhost.sh
          inputs:
            process:
              args: [WF-1]
    relationships:
      - type: cloudify.relationships.contained_in
        target: host
      - type: cloudify.relationships.depends_on
        target: ExportFiles1
      - type: cloudify.relationships.depends_on
        target: ExportFiles2
